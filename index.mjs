import { Client } from 'discord.js-selfbot-v13';
import dotenv from 'dotenv';
import { handleCommands } from './handlers/commandHandler.mjs';
import { readFileSync, existsSync } from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import fs from 'fs';
import readline from 'readline';
import { handleMessage as handleAFKMessage } from './commands/afk.mjs';
import { handleMessage } from './handlers/messageHandler.mjs';
import chalk from 'chalk';
import boxen from 'boxen';
import gradient from 'gradient-string';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const CONFIG_PATH = path.join(__dirname, 'config.json');

dotenv.config();

// T·∫°o gradient text
const gradientText = gradient('cyan', 'pink');

// T·∫°o boxen options
const boxenOptions = {
    padding: 1,
    margin: 1,
    borderStyle: 'round',
    borderColor: 'cyan',
    backgroundColor: '#000000',
    title: 'MILKITA - SELFBOT DISCORD',
    titleAlignment: 'center'
};

// T·∫°o welcome message
const welcomeMessage = boxen(
    gradientText(`
    ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
    ‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
    ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë
    ‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë
    ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù
    `) + 
    chalk.cyan(`
    Version: 1.0.0
    Author: Nguy·ªÖn Thi√™n Phong (@phong2079)
    Description: M·ªôt selfbot t√πy ch·ªânh cho Discord, 
    ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi phong2079 v·ªõi s·ª± h·ªó tr·ª£ c·ªßa AI g·ªìm nhi·ªÅu t√≠nh nƒÉng 
    hi·ªán ƒë·∫°i v√† ti·ªán l·ª£i, s·ª≠ d·ª•ng th∆∞ vi·ªán discord.js-selfbot-v13
    
    `) +
    chalk.yellow(`Features:
    ‚Ä¢ Nh·∫π, nhanh v√† ·ªïn ƒë·ªãnh
    ‚Ä¢ H·ªá th·ªëng l·ªánh ƒë∆°n gi·∫£n, d·ªÖ s·ª≠ d·ª•ng
    ‚Ä¢ H·ªó tr·ª£ ƒë·ªãnh d·∫°ng tin nh·∫Øn ki·ªÉu r√µ r√†ng, ƒë·∫πp m·∫Øt
    ‚Ä¢ Nhi·ªÅu ti·ªán √≠ch h·ªó tr·ª£ c√° nh√¢n
    ‚Ä¢ Lu√¥n c·∫≠p nh·∫≠t t√≠nh nƒÉng m·ªõi...
    `),
    boxenOptions
);

const client = new Client();

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

function askQuestion(query) {
    return new Promise(resolve => rl.question(query, resolve));
}

// ƒê·ªçc prefix t·ª´ config
function getPrefix() {
    if (existsSync(CONFIG_PATH)) {
        try {
            const config = JSON.parse(readFileSync(CONFIG_PATH, 'utf8'));
            return config.prefix || ';';
        } catch (err) {
            console.error('L·ªói khi ƒë·ªçc prefix t·ª´ config:', err);
            return ';';
        }
    }
    return ';';
}

async function loadConfig() {
    console.log(chalk.yellow('\nCh·ªçn m·ªôt t√πy ch·ªçn ƒë·ªÉ kh·ªüi ƒë·ªông bot:'));
    console.log(chalk.cyan('1. Load t·ª´ file .env'));
    console.log(chalk.cyan('2. Nh·∫≠p token r·ªìi l∆∞u v√†o file config.json'));
    console.log(chalk.cyan('3. Load t·ª´ file config.json'));

    const choice = await askQuestion(chalk.yellow('Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n (1, 2, ho·∫∑c 3): '));

    let token;

    switch (choice.trim()) {
        case '1':
            dotenv.config();
            console.log(chalk.green('‚úÖ ƒê√£ load t·ª´ file .env'));
            token = process.env.DISCORD_TOKEN;
            break;
        case '2':
            token = await askQuestion(chalk.cyan('üîë Nh·∫≠p token: '));
            const config = { token, prefix: ';' };
            fs.writeFileSync(CONFIG_PATH, JSON.stringify(config, null, 2));
            console.log(chalk.green('‚úÖ ƒê√£ l∆∞u th√¥ng tin v√†o file config.json'));
            break;
        case '3':
            if (fs.existsSync(CONFIG_PATH)) {
                const configData = fs.readFileSync(CONFIG_PATH);
                const config = JSON.parse(configData);
                console.log(chalk.green('‚úÖ ƒê√£ load t·ª´ file config.json'));
                token = config.token;
            } else {
                console.log(chalk.red('‚ùå File config.json kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ch·ªçn t√πy ch·ªçn kh√°c.'));
                rl.close();
                return null;
            }
            break;
        default:
            console.log(chalk.red('‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.'));
            rl.close();
            return null;
    }

    return { token };
}

async function startBot() {
    try {
        // Hi·ªÉn th·ªã welcome message
        console.clear();
        console.log(welcomeMessage);

        // Load config
        const config = await loadConfig();
        if (!config) return;

        const { token } = config;
        if (!token) {
            console.log(chalk.red('‚ùå Token kh√¥ng h·ª£p l·ªá!'));
            process.exit(1);
        }

        // ƒêƒÉng nh·∫≠p
        console.log(chalk.cyan('\nüîê ƒêang ƒëƒÉng nh·∫≠p...'));
        await client.login(token);
        console.log(chalk.green('‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!'));
        
        // T·∫£i l·ªánh
        await handleCommands(client);
        console.log(chalk.green('‚úÖ ƒê√£ t·∫£i xong t·∫•t c·∫£ l·ªánh!'));
        
        // Hi·ªÉn th·ªã th√¥ng tin bot
        console.log(chalk.cyan('\nü§ñ Th√¥ng tin bot:'));
        console.log(chalk.cyan(`‚Ä¢ T√™n: ${client.user.username}`));
        console.log(chalk.cyan(`‚Ä¢ ID: ${client.user.id}`));
        console.log(chalk.cyan(`‚Ä¢ Prefix: ${getPrefix()}`));
        console.log(chalk.cyan(`‚Ä¢ S·ªë server: ${client.guilds.cache.size}`));

        // H·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën hi·ªÉn th·ªã messageHandler kh√¥ng
        const showLogs = await askQuestion(chalk.yellow('\nB·∫°n c√≥ mu·ªën hi·ªÉn th·ªã t·∫•t c·∫£ tin nh·∫Øn trong console kh√¥ng? (y/n): '));
        if (showLogs.toLowerCase() === 'y') {
            console.log(chalk.green('‚úÖ ƒê√£ b·∫≠t hi·ªÉn th·ªã tin nh·∫Øn'));
            process.env.SHOW_MESSAGE_HANDLER = 'true';
        } else {
            console.log(chalk.yellow('‚ö†Ô∏è ƒê√£ t·∫Øt hi·ªÉn th·ªã tin nh·∫Øn'));
            process.env.SHOW_MESSAGE_HANDLER = 'false';
        }
        
        console.log(chalk.green('\n‚ú® Bot ƒë√£ s·∫µn s√†ng!'));

        // X·ª≠ l√Ω s·ª± ki·ªán message
        client.on('messageCreate', async (message) => {
            const prefix = getPrefix();
            if (!message.content.startsWith(prefix)) return;
            if (message.author.id !== client.user.id) return;

            const args = message.content.slice(prefix.length).trim().split(/ +/);
            const cmd = args.shift().toLowerCase();

            message.delete().catch(() => {});

            if (client.commands.has(cmd)) {
                const command = client.commands.get(cmd);

                // PH√ÇN QUY·ªÄN
                const perm = command.permission || 'everyone';
                const authorId = message.author.id;

                if (perm === 'admin') {
                    const isAdmin = message.member?.permissions?.has('Administrator') || false;
                    if (!isAdmin) {
                        return message.channel.send('`‚ùå L·ªánh n√†y ch·ªâ d√†nh cho Admin.`')
                            .then(msg => setTimeout(() => msg.delete().catch(() => {}), 15000));
                    }
                }

                try {
                    const reply = await command.execute(message, args, client);
                    if (reply && typeof reply === 'string') {
                        const sent = await message.channel.send(`\`${reply}\``);
                        setTimeout(() => sent.delete().catch(() => {}), 15000);
                    }
                } catch (err) {
                    console.error(`L·ªói khi ch·∫°y l·ªánh ${cmd}:`, err);
                }
            }
        });

        // X·ª≠ l√Ω s·ª± ki·ªán AFK
        client.on('messageCreate', handleAFKMessage);
        
        // X·ª≠ l√Ω tin nh·∫Øn th√¥ng th∆∞·ªùng
        handleMessage(client);

    } catch (error) {
        console.log(chalk.red(`\n‚ùå L·ªói khi ƒëƒÉng nh·∫≠p: ${error.message}`));
        process.exit(1);
    }
}

startBot();
